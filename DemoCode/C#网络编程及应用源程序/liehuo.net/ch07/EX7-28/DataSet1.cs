//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EX7_25 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private salesDataTable tablesales;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["sales"] != null)) {
                    this.Tables.Add(new salesDataTable(ds.Tables["sales"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public salesDataTable sales {
            get {
                return this.tablesales;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["sales"] != null)) {
                this.Tables.Add(new salesDataTable(ds.Tables["sales"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablesales = ((salesDataTable)(this.Tables["sales"]));
            if ((this.tablesales != null)) {
                this.tablesales.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablesales = new salesDataTable();
            this.Tables.Add(this.tablesales);
        }
        
        private bool ShouldSerializesales() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void salesRowChangeEventHandler(object sender, salesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class salesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstor_id;
            
            private DataColumn columnord_num;
            
            private DataColumn columnord_date;
            
            private DataColumn columnqty;
            
            private DataColumn columnpayterms;
            
            private DataColumn columntitle_id;
            
            internal salesDataTable() : 
                    base("sales") {
                this.InitClass();
            }
            
            internal salesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn stor_idColumn {
                get {
                    return this.columnstor_id;
                }
            }
            
            internal DataColumn ord_numColumn {
                get {
                    return this.columnord_num;
                }
            }
            
            internal DataColumn ord_dateColumn {
                get {
                    return this.columnord_date;
                }
            }
            
            internal DataColumn qtyColumn {
                get {
                    return this.columnqty;
                }
            }
            
            internal DataColumn paytermsColumn {
                get {
                    return this.columnpayterms;
                }
            }
            
            internal DataColumn title_idColumn {
                get {
                    return this.columntitle_id;
                }
            }
            
            public salesRow this[int index] {
                get {
                    return ((salesRow)(this.Rows[index]));
                }
            }
            
            public event salesRowChangeEventHandler salesRowChanged;
            
            public event salesRowChangeEventHandler salesRowChanging;
            
            public event salesRowChangeEventHandler salesRowDeleted;
            
            public event salesRowChangeEventHandler salesRowDeleting;
            
            public void AddsalesRow(salesRow row) {
                this.Rows.Add(row);
            }
            
            public salesRow AddsalesRow(string stor_id, string ord_num, System.DateTime ord_date, short qty, string payterms, string title_id) {
                salesRow rowsalesRow = ((salesRow)(this.NewRow()));
                rowsalesRow.ItemArray = new object[] {
                        stor_id,
                        ord_num,
                        ord_date,
                        qty,
                        payterms,
                        title_id};
                this.Rows.Add(rowsalesRow);
                return rowsalesRow;
            }
            
            public salesRow FindBystor_idord_numtitle_id(string stor_id, string ord_num, string title_id) {
                return ((salesRow)(this.Rows.Find(new object[] {
                            stor_id,
                            ord_num,
                            title_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                salesDataTable cln = ((salesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new salesDataTable();
            }
            
            internal void InitVars() {
                this.columnstor_id = this.Columns["stor_id"];
                this.columnord_num = this.Columns["ord_num"];
                this.columnord_date = this.Columns["ord_date"];
                this.columnqty = this.Columns["qty"];
                this.columnpayterms = this.Columns["payterms"];
                this.columntitle_id = this.Columns["title_id"];
            }
            
            private void InitClass() {
                this.columnstor_id = new DataColumn("stor_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstor_id);
                this.columnord_num = new DataColumn("ord_num", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnord_num);
                this.columnord_date = new DataColumn("ord_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnord_date);
                this.columnqty = new DataColumn("qty", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnqty);
                this.columnpayterms = new DataColumn("payterms", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpayterms);
                this.columntitle_id = new DataColumn("title_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle_id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnstor_id,
                                this.columnord_num,
                                this.columntitle_id}, true));
                this.columnstor_id.AllowDBNull = false;
                this.columnord_num.AllowDBNull = false;
                this.columnord_date.AllowDBNull = false;
                this.columnqty.AllowDBNull = false;
                this.columnpayterms.AllowDBNull = false;
                this.columntitle_id.AllowDBNull = false;
            }
            
            public salesRow NewsalesRow() {
                return ((salesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new salesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(salesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.salesRowChanged != null)) {
                    this.salesRowChanged(this, new salesRowChangeEvent(((salesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.salesRowChanging != null)) {
                    this.salesRowChanging(this, new salesRowChangeEvent(((salesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.salesRowDeleted != null)) {
                    this.salesRowDeleted(this, new salesRowChangeEvent(((salesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.salesRowDeleting != null)) {
                    this.salesRowDeleting(this, new salesRowChangeEvent(((salesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovesalesRow(salesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class salesRow : DataRow {
            
            private salesDataTable tablesales;
            
            internal salesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesales = ((salesDataTable)(this.Table));
            }
            
            public string stor_id {
                get {
                    return ((string)(this[this.tablesales.stor_idColumn]));
                }
                set {
                    this[this.tablesales.stor_idColumn] = value;
                }
            }
            
            public string ord_num {
                get {
                    return ((string)(this[this.tablesales.ord_numColumn]));
                }
                set {
                    this[this.tablesales.ord_numColumn] = value;
                }
            }
            
            public System.DateTime ord_date {
                get {
                    return ((System.DateTime)(this[this.tablesales.ord_dateColumn]));
                }
                set {
                    this[this.tablesales.ord_dateColumn] = value;
                }
            }
            
            public short qty {
                get {
                    return ((short)(this[this.tablesales.qtyColumn]));
                }
                set {
                    this[this.tablesales.qtyColumn] = value;
                }
            }
            
            public string payterms {
                get {
                    return ((string)(this[this.tablesales.paytermsColumn]));
                }
                set {
                    this[this.tablesales.paytermsColumn] = value;
                }
            }
            
            public string title_id {
                get {
                    return ((string)(this[this.tablesales.title_idColumn]));
                }
                set {
                    this[this.tablesales.title_idColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class salesRowChangeEvent : EventArgs {
            
            private salesRow eventRow;
            
            private DataRowAction eventAction;
            
            public salesRowChangeEvent(salesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public salesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
